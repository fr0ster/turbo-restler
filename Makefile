# Makefile –¥–ª—è turbo-restler
# –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: make [target]

.PHONY: help build clean test test-race test-coverage lint format examples install-deps

# –ó–º—ñ–Ω–Ω—ñ
BIN_DIR = bin
GO = go
GOOS ?= $(shell go env GOOS)
GOARCH ?= $(shell go env GOARCH)
VERSION ?= $(shell git describe --tags --always --dirty 2>/dev/null || echo "dev")

# –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –≤–∏–≤–æ–¥—É
GREEN = \033[32m
YELLOW = \033[33m
RED = \033[31m
RESET = \033[0m

# –î–æ–ø–æ–º–æ–≥–∞
help:
	@echo "$(GREEN)üöÄ Turbo-Restler Makefile$(RESET)"
	@echo ""
	@echo "$(YELLOW)–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:$(RESET)"
	@echo "  build          - –ó–±—ñ—Ä–∫–∞ –≤—Å—ñ—Ö –ø–∞–∫–µ—Ç—ñ–≤ —Ç–∞ –ø—Ä–∏–∫–ª–∞–¥—ñ–≤"
	@echo "  clean          - –û—á–∏—â–µ–Ω–Ω—è –ø–∞–ø–∫–∏ bin"
	@echo "  test           - –ó–∞–ø—É—Å–∫ –≤—Å—ñ—Ö —Ç–µ—Å—Ç—ñ–≤"
	@echo "  test-race      - –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤ –∑ race detector"
	@echo "  test-coverage  - –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤ –∑ –ø–æ–∫—Ä–∏—Ç—Ç—è–º –∫–æ–¥—É"
	@echo "  lint           - –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–¥—É –∑ golangci-lint"
	@echo "  format         - –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∫–æ–¥—É"
	@echo "  examples       - –ó–±—ñ—Ä–∫–∞ –ø—Ä–∏–∫–ª–∞–¥—ñ–≤"
	@echo "  install-deps   - –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π"
	@echo "  help           - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É"
	@echo ""
	@echo "$(YELLOW)–ó–º—ñ–Ω–Ω—ñ:$(RESET)"
	@echo "  GOOS=$(GOOS)"
	@echo "  GOARCH=$(GOARCH)"
	@echo "  VERSION=$(VERSION)"

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–ø–∫–∏ bin —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
$(BIN_DIR):
	@mkdir -p $(BIN_DIR)
	@echo "$(GREEN)üìÅ Created $(BIN_DIR) directory$(RESET)"

# –ó–±—ñ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–∏—Ö –ø–∞–∫–µ—Ç—ñ–≤
build: $(BIN_DIR)
	@echo "$(GREEN)üî® Building turbo-restler...$(RESET)"
	@echo "$(YELLOW)üì¶ Building packages...$(RESET)"
	
	# WebSocket –ø–∞–∫–µ—Ç
	@echo "  - Building web_socket package..."
	@$(GO) build -o $(BIN_DIR)/websocket_test ./web_socket/
	
	# REST API –ø–∞–∫–µ—Ç
	@echo "  - Building rest_api package..."
	@$(GO) build -o $(BIN_DIR)/restapi_test ./rest_api/
	
	@echo "$(GREEN)‚úÖ Packages built successfully!$(RESET)"

# –ó–±—ñ—Ä–∫–∞ –ø—Ä–∏–∫–ª–∞–¥—ñ–≤
examples: $(BIN_DIR)
	@echo "$(YELLOW)üöÄ Building examples...$(RESET)"
	
	# WebSocket –ø—Ä–∏–∫–ª–∞–¥
	@echo "  - Building websocket_example..."
	@$(GO) build -o $(BIN_DIR)/websocket_example ./examples/
	
	@echo "$(GREEN)‚úÖ Examples built successfully!$(RESET)"

# –ó–±—ñ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤–∏—Ö –±—ñ–Ω–∞—Ä–Ω–∏–∫—ñ–≤
test-binaries: $(BIN_DIR)
	@echo "$(YELLOW)üß™ Building test binaries...$(RESET)"
	
	# WebSocket —Ç–µ—Å—Ç–∏
	@echo "  - Building web_socket tests..."
	@$(GO) test -c -o $(BIN_DIR)/websocket_tests ./web_socket/
	
	# REST API —Ç–µ—Å—Ç–∏
	@echo "  - Building rest_api tests..."
	@$(GO) test -c -o $(BIN_DIR)/restapi_tests ./rest_api/
	
	@echo "$(GREEN)‚úÖ Test binaries built successfully!$(RESET)"

# –ü–æ–≤–Ω–∞ –∑–±—ñ—Ä–∫–∞
all: build examples test-binaries
	@echo "$(GREEN)üìä Binary sizes:$(RESET)"
	@ls -lh $(BIN_DIR)/
	@echo "$(GREEN)‚úÖ Full build completed successfully!$(RESET)"
	@echo "$(YELLOW)üìÅ Binaries are in: $(shell pwd)/$(BIN_DIR)/$(RESET)"

# –û—á–∏—â–µ–Ω–Ω—è
clean:
	@echo "$(YELLOW)üßπ Cleaning build artifacts...$(RESET)"
	@rm -rf $(BIN_DIR)/*
	@echo "$(GREEN)‚úÖ Clean completed!$(RESET)"

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤
test:
	@echo "$(YELLOW)üß™ Running tests...$(RESET)"
	@$(GO) test -v ./...
	@echo "$(GREEN)‚úÖ Tests completed!$(RESET)"

# –ó–∞–ø—É—Å–∫ "—Ç–∏—Ö–∏—Ö" —Ç–µ—Å—Ç—ñ–≤ (–±–µ–∑ –∑–∞–π–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å)
test-quiet:
	@echo "$(YELLOW)üîá Running quiet tests...$(RESET)"
	@$(GO) test -v ./... 2>&1 | grep -v "broken pipe\|Server write error\|Server read error" || true
	@echo "$(GREEN)‚úÖ Quiet tests completed!$(RESET)"

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤ –∑ race detector
test-race:
	@echo "$(YELLOW)üèÉ Running tests with race detector...$(RESET)"
	@$(GO) test -race -v ./...
	@echo "$(GREEN)‚úÖ Race tests completed!$(RESET)"

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤ –∑ –ø–æ–∫—Ä–∏—Ç—Ç—è–º
test-coverage:
	@echo "$(YELLOW)üìä Running tests with coverage...$(RESET)"
	@$(GO) test -coverprofile=coverage.out ./...
	@$(GO) tool cover -html=coverage.out -o coverage.html
	@echo "$(GREEN)‚úÖ Coverage report generated: coverage.html$(RESET)"

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–¥—É
lint:
	@echo "$(YELLOW)üîç Running linter...$(RESET)"
	@if command -v golangci-lint >/dev/null 2>&1; then \
		golangci-lint run; \
	else \
		echo "$(RED)‚ùå golangci-lint not installed. Install with:$(RESET)"; \
		echo "   go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest"; \
	fi

# –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∫–æ–¥—É
format:
	@echo "$(YELLOW)‚ú® Formatting code...$(RESET)"
	@$(GO) fmt ./...
	@echo "$(GREEN)‚úÖ Code formatted!$(RESET)"

# –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
install-deps:
	@echo "$(YELLOW)üì¶ Installing dependencies...$(RESET)"
	@$(GO) mod download
	@$(GO) mod tidy
	@echo "$(GREEN)‚úÖ Dependencies installed!$(RESET)"

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
deps-check:
	@echo "$(YELLOW)üîç Checking dependencies...$(RESET)"
	@$(GO) mod verify
	@$(GO) list -m all
	@echo "$(GREEN)‚úÖ Dependencies checked!$(RESET)"

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–∫–ª–∞–¥—ñ–≤
run-example: examples
	@echo "$(YELLOW)üöÄ Running websocket example...$(RESET)"
	@./$(BIN_DIR)/websocket_example

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —è–∫–æ—Å—Ç—ñ –∫–æ–¥—É
quality: lint test test-race
	@echo "$(GREEN)‚úÖ Quality checks completed!$(RESET)"

# –î–æ–ø–æ–º–æ–≥–∞ –∑ –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
b: build
e: examples
t: test
tq: test-quiet
c: clean
h: help

# Default target
.DEFAULT_GOAL := help

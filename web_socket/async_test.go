package web_socket_test

import (
	"errors"
	"fmt"
	"net/http"
	"strconv"
	"sync"
	"testing"
	"time"

	"github.com/bitly/go-simplejson"
	"github.com/fr0ster/turbo-restler/web_socket"
	"github.com/gorilla/websocket"
	"github.com/sirupsen/logrus"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

var (
	upgraderAsync = websocket.Upgrader{}
	// onceAsync     = sync.Once{}
	// timeOut       = 500 * time.Millisecond // –∞–±–æ 1 * time.Second
)

// üß™ –ó–∞–≥–∞–ª—å–Ω–∏–π handler ‚Äî –ø–æ—Å—Ç—ñ–π–Ω–∏–π –ø–æ—Ç—ñ–∫
func handler(w http.ResponseWriter, r *http.Request) {
	conn, err := upgraderAsync.Upgrade(w, r, nil)
	if err != nil {
		logrus.Print("upgrade:", err)
		return
	}
	defer conn.Close()

	for {
		data := "some data"
		err := conn.WriteMessage(websocket.TextMessage, []byte(data))
		if err != nil {
			logrus.Println("write:", err)
			break
		}
		time.Sleep(100 * time.Millisecond)
	}
}

func bingoBongoHandler(w http.ResponseWriter, r *http.Request) {
	conn, err := upgraderAsync.Upgrade(w, r, nil)
	if err != nil {
		logrus.Print("upgrade:", err)
		return
	}
	defer conn.Close()

	// –ó—á–∏—Ç—É–≤–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—É pong timeout
	pongTimeout := 5 * time.Second // default
	if pongTimeoutStr := r.URL.Query().Get("pong"); pongTimeoutStr != "" {
		if ms, err := strconv.Atoi(pongTimeoutStr); err == nil {
			pongTimeout = time.Duration(ms) * time.Millisecond
		} else {
			logrus.Println("Invalid pong timeout value")
			return
		}
	}

	// –û–±—Ä–æ–±–Ω–∏–∫ PONG
	pongReceived := make(chan struct{}, 1)
	conn.SetPongHandler(func(appData string) error {
		logrus.Info("‚úÖ PONG received")
		select {
		case pongReceived <- struct{}{}:
		default:
		}
		return nil
	})

	stopServer := make(chan struct{})
	var mu sync.Mutex

	// –ì–æ—Ä—É—Ç—ñ–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ pong
	ticker := time.NewTicker(pongTimeout / 2)
	go func() {
		defer ticker.Stop()
		for {
			select {
			case <-stopServer:
				logrus.Info("üõë Ping loop stopped")
				return
			case <-ticker.C:
				go func() {
					mu.Lock()
					defer mu.Unlock()
					handlePongTimeout(conn, pongTimeout, pongReceived, stopServer)
				}()
			}
		}
	}()

	// –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
	for {
		select {
		case <-stopServer:
			logrus.Println("Test failed ‚Äî stopping server")
			return
		default:
			mu.Lock()
			err := conn.WriteMessage(websocket.TextMessage, []byte("some data"))
			mu.Unlock()
			if err != nil {
				logrus.Println("write:", err)
				return
			}
			time.Sleep(100 * time.Millisecond)
		}
	}
}

func handlePongTimeout(conn *websocket.Conn, timeout time.Duration, pongReceived chan struct{}, stopServer chan struct{}) {
	if err := conn.WriteControl(websocket.PingMessage, []byte("ping"), time.Now().Add(timeout)); err != nil {
		logrus.Errorf("‚ùå Error sending ping: %v", err)
		return
	}
	logrus.Info("üì° PING sent")

	select {
	case <-pongReceived:
		logrus.Info("üéâ Pong received before timeout")
	// case <-time.After(timeout * 5):
	// 	logrus.Warn("‚è∞ Pong timeout, closing connection")
	// 	_ = conn.WriteControl(
	// 		websocket.CloseMessage,
	// 		websocket.FormatCloseMessage(1008, "Pong timeout"),
	// 		time.Now().Add(time.Second),
	// 	)
	// 	_ = conn.Close()

	// 	// üí• –ó—É–ø–∏–Ω—è—î–º–æ —Å–µ—Ä–≤–µ—Ä
	// 	select {
	// 	case stopServer <- struct{}{}:
	// 	default:
	// 	}
	default:
	}
}

// üß™ Handler –¥–ª—è —Ä–∞–ø—Ç–æ–≤–æ–≥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è
func abruptCloseHandler(w http.ResponseWriter, r *http.Request) {
	conn, err := upgraderAsync.Upgrade(w, r, nil)
	if err != nil {
		logrus.Print("upgrade:", err)
		return
	}
	conn.WriteMessage(websocket.TextMessage, []byte("final message before abrupt close"))
	conn.Close() // –±–µ–∑ CloseMessage
}

// üß™ Handler –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è
func normalCloseHandler(w http.ResponseWriter, r *http.Request) {
	conn, err := upgraderAsync.Upgrade(w, r, nil)
	if err != nil {
		logrus.Print("upgrade:", err)
		return
	}
	conn.WriteMessage(websocket.TextMessage, []byte("final message before normal close"))
	conn.WriteControl(websocket.CloseMessage,
		websocket.FormatCloseMessage(websocket.CloseNormalClosure, "normal close"),
		time.Now().Add(time.Second))
	conn.Close()
}

// üß™ –°–µ—Ä–≤–µ—Ä –Ω–∞–¥—Å–∏–ª–∞—î Ping ‚Üí –∫–ª—ñ—î–Ω—Ç –º–∞—î –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ Pong
func pingPongHandler(w http.ResponseWriter, r *http.Request) {
	conn, err := upgraderAsync.Upgrade(w, r, nil)
	if err != nil {
		logrus.Print("upgrade:", err)
		return
	}
	defer conn.Close()

	// üïê –ß–∏—Ç–∞—î–º–æ timeout –∑ query-–ø–∞—Ä–∞–º–µ—Ç—Ä–∞, –Ω–∞–ø—Ä.: ?timeout=2s
	timeoutStr := r.URL.Query().Get("timeout")
	timeout := 1 * time.Second // –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
	if timeoutStr != "" {
		if parsed, err := time.ParseDuration(timeoutStr); err == nil {
			timeout = parsed
		} else {
			logrus.Warnf("Invalid timeout value: %v", timeoutStr)
		}
	}

	logrus.Infof("üîÅ Ping/Pong loop started (timeout: %v)", timeout)

	for i := 0; i < 3; i++ {
		err := conn.WriteControl(websocket.PingMessage, []byte("ping-check"), time.Now().Add(time.Second))
		if err != nil {
			logrus.Warnf("‚ùå Failed to send ping: %v", err)
			return
		}
		logrus.Infof("üì° Sent Ping %d to client", i+1)

		// conn.SetReadDeadline(time.Now().Add(timeout))
		mt, msg, err := conn.ReadMessage()
		if err != nil {
			logrus.Warnf("‚ùå Read error after ping: %v", err)
			return
		}
		if mt == websocket.PongMessage {
			logrus.Infof("‚úÖ Got Pong %d from client: %s", i+1, string(msg))
		} else {
			logrus.Warnf("‚ö†Ô∏è Expected Pong, got type %d", mt)
			return
		}

		time.Sleep(200 * time.Millisecond)
	}

	logrus.Info("‚úÖ Ping/Pong loop finished successfully ‚Äî client alive")
}

func pingHandler(w http.ResponseWriter, r *http.Request) {
	conn, err := upgraderAsync.Upgrade(w, r, nil)
	if err != nil {
		logrus.Print("upgrade:", err)
		return
	}
	defer conn.Close()

	logrus.Info("üì° Client connected to pingHandler")

	conn.SetPingHandler(func(appData string) error {
		logrus.Infof("üì• Received PING: %s", appData)
		return conn.WriteControl(websocket.PongMessage, []byte(appData), time.Now().Add(time.Second))
	})

	// –ü—Ä–æ—Å—Ç–æ —á–∏—Ç–∞—î–º–æ –±—É–¥—å-—è–∫—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ–± –∑–±–µ—Ä–µ–≥—Ç–∏ –∑‚Äô—î–¥–Ω–∞–Ω–Ω—è
	for {
		_, _, err := conn.ReadMessage()
		if err != nil {
			logrus.Warnf("üîå Connection closed: %v", err)
			break
		}
	}
}

func pongHandler(w http.ResponseWriter, r *http.Request) {
	conn, err := upgraderAsync.Upgrade(w, r, nil)
	if err != nil {
		logrus.Print("upgrade:", err)
		return
	}
	defer conn.Close()

	timeout := 2 * time.Second // default
	if t := r.URL.Query().Get("timeout"); t != "" {
		if parsed, err := time.ParseDuration(t); err == nil {
			timeout = parsed
		} else {
			logrus.Warnf("Invalid timeout: %s", t)
		}
	}

	// var lastPongMu sync.Mutex
	// lastPong := time.Now()

	conn.SetPongHandler(func(appData string) error {
		logrus.Infof("üì• Received PONG: %s", appData)
		// lastPongMu.Lock()
		// lastPong = time.Now()
		// lastPongMu.Unlock()
		return nil
	})

	ticker := time.NewTicker(timeout / 2)
	defer ticker.Stop()

	logrus.Infof("üîÅ pongHandler started with timeout %v", timeout)

	for {
		err := conn.WriteControl(websocket.PingMessage, []byte("ping"), time.Now().Add(timeout))
		if err != nil {
			// logrus.Warnf("‚ùå Failed to send ping: %v", err)
			return
		}
		logrus.Info("üì° Sent PING to client")
		time.Sleep(timeout / 2)
	}
}

func errorHandler(w http.ResponseWriter, r *http.Request) {
	conn, err := upgraderAsync.Upgrade(w, r, nil)
	if err != nil {
		logrus.Print("upgrade:", err)
		return
	}
	defer conn.Close()

	for {
		_, msg, err := conn.ReadMessage()
		if err != nil {
			logrus.Warnf("‚ùå Read error (socket may be closed): %v", err)
			return
		}

		req, err := simplejson.NewJson(msg)
		if err != nil {
			logrus.Warn("‚ö†Ô∏è Invalid JSON received")
			continue
		}

		id := req.Get("id").MustString()
		method := req.Get("method").MustString()

		switch method {
		case "ERROR":
			params := req.Get("params").MustArray()
			errorText := "generic-error"
			if len(params) > 0 {
				if s, ok := params[0].(string); ok && s != "" {
					errorText = s
				}
			}

			logrus.Warnf("üî¥ Responding with error: %s (id: %s)", errorText, id)

			go func(id, errMsg string) {
				// –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–æ —à–ª–µ–º–æ –ø–æ–º–∏–ª–∫—É –∑ —Ü–∏–º ID
				for {
					resp := simplejson.New()
					resp.Set("id", id)
					resp.Set("error", errMsg)

					b, _ := resp.Encode()
					err := conn.WriteMessage(websocket.TextMessage, b)
					if err != nil {
						logrus.Warnf("‚ö†Ô∏è Failed to write error response: %v", err)
						return
					}

					time.Sleep(200 * time.Millisecond)
				}
			}(id, errorText)

		default:
			resp := simplejson.New()
			resp.Set("id", id)
			resp.Set("result", "OK")
			b, _ := resp.Encode()
			conn.WriteMessage(websocket.TextMessage, b)
		}
	}
}

// üîß –ó–∞–ø—É—Å–∫–∞—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Å–µ—Ä–≤–µ—Ä
func startServer() {
	onceAsync.Do(func() {
		http.HandleFunc("/stream", handler)
		http.HandleFunc("/abrupt", abruptCloseHandler)
		http.HandleFunc("/normal", normalCloseHandler)
		http.HandleFunc("/ping-pong", pingPongHandler)
		http.HandleFunc("/error", errorHandler)
		http.HandleFunc("/ping", pingHandler)
		http.HandleFunc("/pong", pongHandler)
		http.HandleFunc("/bingo", bingoBongoHandler)
		go func() {
			logrus.Info("Starting WebSocket test server on :8080")
			logrus.Fatal(http.ListenAndServe(":8080", nil))
		}()
	})
}

// üîÅ –ü—Ä–æ—Å—Ç–∞ –æ–±—Ä–æ–±–∫–∞ JSON –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
func mockHandler(message *simplejson.Json) {
	logrus.Infof("Received message: %+v", message)
}

// ‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Ç–µ—Å—Ç –Ω–∞ —Å—Ç—Ä—ñ–º—ñ–Ω–≥
func TestStartLocalStreamer(t *testing.T) {
	go startServer()
	time.Sleep(timeOut)

	errC := make(chan error, 1)
	mockErrHandler := func(err error) error {
		errC <- err
		return err
	}
	checkNoErr := func() {
		select {
		case err := <-errC:
			t.Errorf("unexpected error received: %v", err)
		case <-time.After(timeOut):
			t.Log("‚úÖ no error received, as expected")
		}
	}

	stream, err := web_socket.New(
		web_socket.WsHost("localhost:8080"),
		web_socket.WsPath("/stream"),
		web_socket.SchemeWS,
		web_socket.TextMessage,
		true)
	assert.NoError(t, err)
	assert.NotNil(t, stream)
	stream.SetErrHandler(mockErrHandler)
	stream.AddHandler("default", mockHandler)
	checkNoErr()

	time.Sleep(timeOut)
	stream.RemoveHandler("default")
	checkNoErr()
}

func TestBingoBongoStreamer(t *testing.T) {
	go startServer()
	time.Sleep(3000 * time.Millisecond) // –¥–∞—î–º–æ —Å–µ—Ä–≤–µ—Ä—É –ø—ñ–¥–Ω—è—Ç–∏—Å—å

	// var mu sync.Mutex // üîí mutex –¥–ª—è –ø–æ—Ç–æ–∫–æ–±–µ–∑–ø–µ–∫–∏

	errC := make(chan error, 1)
	mockErrHandler := func(err error) error {
		select {
		case errC <- err:
		default:
			t.Logf("‚ö†Ô∏è error dropped: %v", err)
		}
		return err
	}
	checkNoErr := func() {
		select {
		case err := <-errC:
			t.Errorf("unexpected error received: %v", err)
		case <-time.After(500 * time.Millisecond):
			t.Log("‚úÖ no error received, as expected")
		}
	}

	stream, err := web_socket.New(
		web_socket.WsHost("localhost:8080"),
		web_socket.WsPath("/bingo?pong=1000"),
		web_socket.SchemeWS,
		web_socket.TextMessage,
		true)
	assert.NoError(t, err)
	assert.NotNil(t, stream)

	stream.SetCloseHandler(nil)

	stream.SetErrHandler(mockErrHandler)
	mockHandler := func(msg *simplejson.Json) {}
	stream.AddHandler("default", mockHandler)

	// –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ ping —á–µ—Ä–µ–∑ –ø–æ—Ç–æ–∫–æ–±–µ–∑–ø–µ—á–Ω–∏–π WriteControl
	stream.GetConn().SetPingHandler(func(appData string) error {
		logrus.Info("üì° received ping, sending pong")
		// mu.Lock()
		// defer mu.Unlock()
		err := stream.GetConn().WriteMessage(websocket.PongMessage, []byte(appData))
		return err
	})
	// stream.SetPingHandler()

	// üéØ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ —á–∏—Ç–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è, —ñ–Ω–∞–∫—à–µ pong –Ω–µ –æ–±—Ä–æ–±–∏—Ç—å—Å—è
	// go func() {
	// 	for {
	// 		if _, err := stream.Read(); err != nil {
	// 			return
	// 		}
	// 	}
	// }()

	// checkNoErr()

	time.Sleep(6000 * time.Millisecond) // —á–µ–∫–∞—î–º–æ –¥–æ–≤—à–µ –∑–∞ —Ç–∞–π–º–∞—É—Ç

	stream.RemoveHandler("default")
	checkNoErr()
}

// ‚ùå –†–∞–ø—Ç–æ–≤–µ –∑–∞–∫—Ä–∏—Ç—Ç—è –∑‚Äô—î–¥–Ω–∞–Ω–Ω—è —Å–µ—Ä–≤–µ—Ä–æ–º
func TestAbruptCloseStreamer(t *testing.T) {
	go startServer()
	time.Sleep(timeOut)

	errC := make(chan error, 1)
	mockErrHandler := func(err error) error {
		errC <- err
		return err
	}

	stream, err := web_socket.New(
		web_socket.WsHost("localhost:8080"),
		web_socket.WsPath("/abrupt"),
		web_socket.SchemeWS,
		web_socket.TextMessage,
		false)
	assert.NoError(t, err)

	stream.SetErrHandler(mockErrHandler)
	stream.AddHandler("abrupt", mockHandler)

	select {
	case err := <-errC:
		assert.Error(t, err)
		assert.Contains(t, err.Error(), "1006") // –∞–±–æ "unexpected EOF"
		t.Logf("Received expected abrupt close error: %v", err)
	case <-time.After(2 * time.Second):
		t.Error("Timeout waiting for abrupt close error")
	}

	// –≥–∞—Ä–∞–Ω—Ç—É—î–º–æ –∑—É–ø–∏–Ω–∫—É loop
	stream.RemoveHandler("abrupt")
}

// ‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω–µ –∑–∞–∫—Ä–∏—Ç—Ç—è (CloseMessage –∑ –∫–æ–¥–æ–º 1000)
func TestNormalCloseStreamer(t *testing.T) {
	go startServer()
	time.Sleep(timeOut)

	errC := make(chan error, 1)
	mockErrHandler := func(err error) error {
		errC <- err
		return err
	}

	stream, err := web_socket.New(
		web_socket.WsHost("localhost:8080"),
		web_socket.WsPath("/normal"),
		web_socket.SchemeWS,
		web_socket.TextMessage,
		false)
	assert.NoError(t, err)

	stream.SetErrHandler(mockErrHandler)
	stream.AddHandler("normal", mockHandler)

	select {
	case err := <-errC:
		assert.Error(t, err)
		assert.Contains(t, err.Error(), "1000")
		t.Logf("Received expected normal close error: %v", err)
	case <-time.After(10 * time.Second):
		t.Error("Timeout waiting for normal close error")
	}

	// –≥–∞—Ä–∞–Ω—Ç—É—î–º–æ –∑—É–ø–∏–Ω–∫—É loop
	stream.RemoveHandler("normal")
}

func TestAbruptCloseLoopStops(t *testing.T) {
	go startServer()
	time.Sleep(timeOut)

	errC := make(chan error, 1)
	extraErr := make(chan error, 1)

	mockErrHandler := func(err error) error {
		select {
		case errC <- err: // –ø–µ—Ä—à–∞ –ø–æ–º–∏–ª–∫–∞
		default:
			extraErr <- err // –¥—Ä—É–≥–∞ –ø–æ–º–∏–ª–∫–∞ = loop –Ω–µ –∑—É–ø–∏–Ω–∏–≤—Å—è
		}
		return err
	}

	stream, err := web_socket.New(
		web_socket.WsHost("localhost:8080"),
		web_socket.WsPath("/abrupt"),
		web_socket.SchemeWS,
		web_socket.TextMessage,
		false)
	assert.NoError(t, err)

	stream.SetErrHandler(mockErrHandler)
	stream.AddHandler("panic-test", mockHandler)

	select {
	case err := <-errC:
		assert.Error(t, err)
		t.Logf("Got expected first error: %v", err)

		// –¥–∞—î–º–æ —Ç—Ä–æ—Ö–∏ —á–∞—Å—É: —è–∫—â–æ loop –Ω–µ –∑—É–ø–∏–Ω–∏–≤—Å—è, –±—É–¥–µ —â–µ –æ–¥–∏–Ω err
		time.Sleep(300 * time.Millisecond)

		select {
		case extra := <-extraErr:
			t.Fatalf("loop did NOT stop: received extra error: %v", extra)
		default:
			t.Log("loop exited properly after first error ‚úÖ")
		}

	case <-time.After(2 * time.Second):
		t.Fatal("Timeout waiting for expected error")
	}
}

func TestPingPongConnectionAlive(t *testing.T) {
	go startServer()
	time.Sleep(timeOut)

	errC := make(chan error, 1)
	mockErrHandler := func(err error) error {
		errC <- err
		return err
	}

	stream, err := web_socket.New(
		web_socket.WsHost("localhost:8080"),
		web_socket.WsPath("/ping-pong?timeout=1s"),
		web_socket.SchemeWS,
		web_socket.TextMessage,
		true)
	assert.NoError(t, err)

	stream.SetErrHandler(mockErrHandler)
	// stream.AddHandler("ping-pong", mockHandler)
	stream.SetPingHandler()
	go func() {
		for {
			_, _, err := stream.GetConn().ReadMessage()
			if err != nil {
				// logrus.Warnf("‚ùå Read error: %v", err)
				return
			}
		}
	}()

	select {
	case err := <-errC:
		t.Fatalf("‚ùå Unexpected error during ping/pong test: %v", err)
	case <-time.After(10 * time.Second):
		t.Log("‚úÖ Client responded to all Pings ‚Äî connection alive")
	}

	stream.RemoveHandler("ping-pong")

	stream.Close()
}

func TestPingHandler_RespondsToClientPings(t *testing.T) {
	go startServer()
	time.Sleep(300 * time.Millisecond)

	errC := make(chan error, 1)
	mockErrHandler := func(err error) error {
		errC <- err
		return err
	}

	var mu sync.Mutex
	pongCount := 0

	ws, err := web_socket.New(
		web_socket.WsHost("localhost:8080"),
		web_socket.WsPath("/ping"),
		web_socket.SchemeWS,
		web_socket.TextMessage,
		false)
	assert.NoError(t, err)
	defer ws.Close()

	ws.SetErrHandler(mockErrHandler)

	ws.SetPongHandler(func(appData string) error {
		mu.Lock()
		pongCount++
		mu.Unlock()
		t.Logf("‚úÖ Received pong: %s", appData)
		return nil
	})

	ws.SetPingHandler()

	// üéØ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ —á–∏—Ç–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è, —ñ–Ω–∞–∫—à–µ pong –Ω–µ –æ–±—Ä–æ–±–∏—Ç—å—Å—è
	go func() {
		for {
			if _, err := ws.Read(); err != nil {
				return
			}
		}
	}()

	const expectedPongs = 5

	for i := 0; i < expectedPongs; i++ {
		err := ws.WriteMessage(websocket.PingMessage, []byte(fmt.Sprintf("ping-%d", i)))
		assert.NoError(t, err, "failed to send ping %d", i)
		time.Sleep(20 * time.Millisecond)
	}

	mu.Lock()
	got := pongCount
	mu.Unlock()

	assert.Equal(t, expectedPongs, got, "‚ùå Expected %d pong responses from server", expectedPongs)
	t.Log("‚úÖ Server responded with all pongs")
}

func TestPongHandler_ServerKeepsConnectionAlive(t *testing.T) {
	go startServer()
	time.Sleep(3000 * time.Millisecond)

	errC := make(chan error, 1)
	mockErrHandler := func(err error) error {
		errC <- err
		return err
	}

	ws, err := web_socket.New(
		web_socket.WsHost("localhost:8080"),
		web_socket.WsPath("/pong?timeout=100ms"),
		web_socket.SchemeWS,
		web_socket.TextMessage,
		true)
	assert.NoError(t, err)
	// defer ws.Close()
	ws.SetErrHandler(mockErrHandler)

	ws.SetPingHandler(func(appData string) error {
		logrus.Printf("üì• Received PING: %s", appData)
		return ws.WriteControl(websocket.PongMessage, []byte(appData), time.Now().Add(time.Second))
	})

	go func() {
		for {
			_, _, err := ws.GetConn().ReadMessage()
			if err != nil {
				// logrus.Warnf("‚ùå Read error: %v", err)
				return
			}
		}
	}()

	ws.SetPongHandler()

	select {
	case err := <-errC:
		t.Fatalf("‚ùå Server closed connection unexpectedly: %v", err)
	case <-time.After(1 * time.Second): // >10 * timeout
		t.Log("‚úÖ Client responded to all pings ‚Äî connection remains alive")
	}
}

func TestWebSocketWrapper_LoopStartsWithAddHandler(t *testing.T) {
	go startServer()
	time.Sleep(timeOut)

	errC := make(chan error, 2) // —Ç—Ä–æ—à–∫–∏ –±—ñ–ª—å—à–µ –±—É—Ñ–µ—Ä–∞ –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ

	mockErrHandler := func(err error) error {
		select {
		case errC <- err:
		default:
			t.Logf("‚ö†Ô∏è errC full, dropping error: %v", err)
		}
		return err
	}

	stream, err := web_socket.New(
		web_socket.WsHost("localhost:8080"),
		web_socket.WsPath("/error?type=loop-start-error"),
		web_socket.SchemeWS,
		web_socket.TextMessage,
		false)
	assert.NoError(t, err)
	require.NotNil(t, stream)

	stream.SetErrHandler(mockErrHandler)

	// –î–æ–¥–∞—î–º–æ —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è —è–∫–æ–≥–æ—Å—å id, –ø—Ä–æ—Å—Ç–æ —â–æ–± –∑–∞–ø—É—Å—Ç–∏—Ç–∏ loop
	stream.AddHandler("test", func(msg *simplejson.Json) {
		if msg.Get("error").MustString() != "" {
			select {
			case errC <- errors.New(msg.Get("error").MustString()):
			default:
			}
			return
		}
		t.Logf("Received message: %s", msg)
	})
	defer func() {
		stream.RemoveHandler("test")
		stream.Close()
	}()

	// –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫–µ –≤–∏–∫–ª–∏—á–µ –ª–æ–≥—ñ—á–Ω—É –ø–æ–º–∏–ª–∫—É
	req := simplejson.New()
	req.Set("id", "loop-err-test") // id –Ω–µ –∑–±—ñ–≥–∞—î—Ç—å—Å—è –∑ test
	req.Set("method", "ERROR")
	req.Set("params", []interface{}{"loop-start-error"})

	err = stream.Send(req)
	assert.NoError(t, err)

	// –û—á—ñ–∫—É—î–º–æ –Ω–∞ –ø–æ–º–∏–ª–∫—É –∑ error handler-–∞
	select {
	case receivedErr := <-errC:
		assert.Error(t, receivedErr)
		assert.Contains(t, receivedErr.Error(), "loop-start-error")
		t.Logf("‚úÖ Caught expected error: %v", receivedErr)
	case <-time.After(2 * time.Second):
		t.Fatal("‚ùå Timed out waiting for error")
	}

	// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ loop —Å–ø—Ä–∞–≤–¥—ñ –∑–∞–ø—É—â–µ–Ω–æ
	assert.True(t, stream.GetLoopStarted(), "loop should be started after AddHandler")
}

func TestStartLocalStreamerParallel(t *testing.T) {
	go startServer()
	time.Sleep(timeOut)

	const parallelClients = 20
	var wg sync.WaitGroup
	wg.Add(parallelClients)

	errC := make(chan error, parallelClients)

	mockErrHandler := func(err error) error {
		errC <- err
		return err
	}

	// –ü–∞—Ä–∞–ª–µ–ª—å–Ω–æ –¥–æ–¥–∞—î–º–æ/–≤–∏–¥–∞–ª—è—î–º–æ handler-–∏
	for i := 0; i < parallelClients; i++ {
		go func(id int) {
			defer wg.Done()

			stream, err := web_socket.New(
				web_socket.WsHost("localhost:8080"),
				web_socket.WsPath("/stream"),
				web_socket.SchemeWS,
				web_socket.TextMessage,
				true)
			assert.NoError(t, err)
			assert.NotNil(t, stream)
			stream.SetErrHandler(mockErrHandler)
			defer stream.Close()

			handlerID := fmt.Sprintf("handler-%d", id)
			stream.AddHandler(handlerID, mockHandler)
			time.Sleep(10 * time.Millisecond) // —Ç—Ä–æ—Ö–∏ –ø–æ—á–µ–∫–∞—Ç–∏
			stream.RemoveHandler(handlerID)
		}(i)
	}

	wg.Wait()

	// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–æ–º–∏–ª–∫–∏
	close(errC)
	for err := range errC {
		assert.NoError(t, err)
	}
}

func TestStartLocalStreamerParallelV2(t *testing.T) {
	go startServer()
	time.Sleep(timeOut)

	const parallelClients = 20
	var wg sync.WaitGroup
	wg.Add(parallelClients)

	errC := make(chan error, parallelClients)

	mockErrHandler := func(err error) error {
		errC <- err
		return err
	}

	stream, err := web_socket.New(
		web_socket.WsHost("localhost:8080"),
		web_socket.WsPath("/stream"),
		web_socket.SchemeWS,
		web_socket.TextMessage,
		true)
	assert.NoError(t, err)
	assert.NotNil(t, stream)
	stream.SetErrHandler(mockErrHandler)
	defer stream.Close()

	// –ü–∞—Ä–∞–ª–µ–ª—å–Ω–æ –¥–æ–¥–∞—î–º–æ/–≤–∏–¥–∞–ª—è—î–º–æ handler-–∏
	for i := 0; i < parallelClients; i++ {
		go func(id int) {
			defer wg.Done()

			handlerID := fmt.Sprintf("handler-%d", id)
			stream.AddHandler(handlerID, mockHandler)
			time.Sleep(10 * time.Millisecond) // —Ç—Ä–æ—Ö–∏ –ø–æ—á–µ–∫–∞—Ç–∏
			stream.RemoveHandler(handlerID)
		}(i)
	}

	wg.Wait()

	// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–æ–º–∏–ª–∫–∏
	close(errC)
	for err := range errC {
		assert.NoError(t, err)
	}
}

package web_socket_test

import (
	"net/http"
	"testing"
	"time"

	"github.com/bitly/go-simplejson"
	"github.com/fr0ster/turbo-restler/web_socket"
	"github.com/gorilla/websocket"
	"github.com/sirupsen/logrus"
	"github.com/stretchr/testify/assert"
)

var (
	upgraderAsync = websocket.Upgrader{}
	// onceAsync     = sync.Once{}
	// timeOut       = 500 * time.Millisecond // –∞–±–æ 1 * time.Second
)

// üß™ –ó–∞–≥–∞–ª—å–Ω–∏–π handler ‚Äî –ø–æ—Å—Ç—ñ–π–Ω–∏–π –ø–æ—Ç—ñ–∫
func handler(w http.ResponseWriter, r *http.Request) {
	conn, err := upgraderAsync.Upgrade(w, r, nil)
	if err != nil {
		logrus.Print("upgrade:", err)
		return
	}
	defer conn.Close()

	for {
		data := "some data"
		err := conn.WriteMessage(websocket.TextMessage, []byte(data))
		if err != nil {
			logrus.Println("write:", err)
			break
		}
		time.Sleep(100 * time.Millisecond)
	}
}

// üß™ Handler –¥–ª—è —Ä–∞–ø—Ç–æ–≤–æ–≥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è
func abruptCloseHandler(w http.ResponseWriter, r *http.Request) {
	conn, err := upgraderAsync.Upgrade(w, r, nil)
	if err != nil {
		logrus.Print("upgrade:", err)
		return
	}
	conn.WriteMessage(websocket.TextMessage, []byte("final message before abrupt close"))
	conn.Close() // –±–µ–∑ CloseMessage
}

// üß™ Handler –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è
func normalCloseHandler(w http.ResponseWriter, r *http.Request) {
	conn, err := upgraderAsync.Upgrade(w, r, nil)
	if err != nil {
		logrus.Print("upgrade:", err)
		return
	}
	conn.WriteMessage(websocket.TextMessage, []byte("final message before normal close"))
	conn.WriteControl(websocket.CloseMessage,
		websocket.FormatCloseMessage(websocket.CloseNormalClosure, "normal close"),
		time.Now().Add(time.Second))
	conn.Close()
}

// üß™ –°–µ—Ä–≤–µ—Ä –Ω–∞–¥—Å–∏–ª–∞—î Ping ‚Üí –∫–ª—ñ—î–Ω—Ç –º–∞—î –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ Pong
func pingPongHandler(w http.ResponseWriter, r *http.Request) {
	conn, err := upgraderAsync.Upgrade(w, r, nil)
	if err != nil {
		logrus.Print("upgrade:", err)
		return
	}
	defer conn.Close()

	// üïê –ß–∏—Ç–∞—î–º–æ timeout –∑ query-–ø–∞—Ä–∞–º–µ—Ç—Ä–∞, –Ω–∞–ø—Ä.: ?timeout=2s
	timeoutStr := r.URL.Query().Get("timeout")
	timeout := 1 * time.Second // –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
	if timeoutStr != "" {
		if parsed, err := time.ParseDuration(timeoutStr); err == nil {
			timeout = parsed
		} else {
			logrus.Warnf("Invalid timeout value: %v", timeoutStr)
		}
	}

	logrus.Infof("üîÅ Ping/Pong loop started (timeout: %v)", timeout)

	for i := 0; i < 3; i++ {
		err := conn.WriteControl(websocket.PingMessage, []byte("ping-check"), time.Now().Add(timeout))
		if err != nil {
			logrus.Warnf("‚ùå Failed to send ping: %v", err)
			return
		}
		logrus.Infof("üì° Sent Ping %d to client", i+1)

		conn.SetReadDeadline(time.Now().Add(timeout))
		mt, msg, err := conn.ReadMessage()
		if err != nil {
			logrus.Warnf("‚ùå Read error after ping: %v", err)
			return
		}
		if mt == websocket.PongMessage {
			logrus.Infof("‚úÖ Got Pong %d from client: %s", i+1, string(msg))
		} else {
			logrus.Warnf("‚ö†Ô∏è Expected Pong, got type %d", mt)
			return
		}

		time.Sleep(200 * time.Millisecond)
	}

	logrus.Info("‚úÖ Ping/Pong loop finished successfully ‚Äî client alive")
}

func errorHandler(w http.ResponseWriter, r *http.Request) {
	errType := r.URL.Query().Get("type") // üëà —á–∏—Ç–∞—î–º–æ —Ç–∏–ø –ø–æ–º–∏–ª–∫–∏ –∑ query

	conn, err := upgraderAsync.Upgrade(w, r, nil)
	if err != nil {
		logrus.Print("upgrade:", err)
		return
	}
	defer conn.Close()

	for {
		_, msg, err := conn.ReadMessage()
		if err != nil {
			logrus.Warnf("‚ùå Read error (socket may be closed): %v", err)
			return
		}

		req, err := simplejson.NewJson(msg)
		if err != nil {
			logrus.Warn("‚ö†Ô∏è Invalid JSON received")
			continue
		}

		id := req.Get("id").MustString()
		method := req.Get("method").MustString()

		resp := simplejson.New()
		resp.Set("id", id)

		switch method {
		case "ERROR":
			if errType == "" {
				errType = "generic-error"
			}
			logrus.Warnf("üî¥ Responding with error: %s", errType)
			resp.Set("error", errType)

			b, _ := resp.Encode()
			conn.WriteMessage(websocket.TextMessage, b)

			// üí° –ù–µ –∑–∞–∫—Ä–∏–≤–∞—î–º–æ –æ–¥—Ä–∞–∑—É
			time.Sleep(200 * time.Millisecond)
			continue

		default:
			resp.Set("result", "OK")
			b, _ := resp.Encode()
			conn.WriteMessage(websocket.TextMessage, b)
		}
	}
}

// üîß –ó–∞–ø—É—Å–∫–∞—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Å–µ—Ä–≤–µ—Ä
func startServer() {
	onceAsync.Do(func() {
		http.HandleFunc("/stream", handler)
		http.HandleFunc("/abrupt", abruptCloseHandler)
		http.HandleFunc("/normal", normalCloseHandler)
		http.HandleFunc("/ping-pong", pingPongHandler)
		http.HandleFunc("/error", errorHandler)
		go func() {
			logrus.Info("Starting WebSocket test server on :8080")
			logrus.Fatal(http.ListenAndServe(":8080", nil))
		}()
	})
}

// üîÅ –ü—Ä–æ—Å—Ç–∞ –æ–±—Ä–æ–±–∫–∞ JSON –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
func mockHandler(message *simplejson.Json) {
	logrus.Infof("Received message: %+v", message)
}

// ‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Ç–µ—Å—Ç –Ω–∞ —Å—Ç—Ä—ñ–º—ñ–Ω–≥
func TestStartLocalStreamer(t *testing.T) {
	go startServer()
	time.Sleep(timeOut)

	errC := make(chan error, 1)
	mockErrHandler := func(err error) error {
		errC <- err
		return err
	}
	checkErr := func() {
		select {
		case err := <-errC:
			assert.NoError(t, err)
		case <-time.After(timeOut):
		}
	}

	stream, err := web_socket.New(
		web_socket.WsHost("localhost:8080"),
		web_socket.WsPath("/stream"),
		web_socket.SchemeWS,
		web_socket.TextMessage,
		true)
	assert.NoError(t, err)
	assert.NotNil(t, stream)
	stream.SetErrHandler(mockErrHandler)
	stream.AddHandler("default", mockHandler)
	checkErr()

	time.Sleep(timeOut)
	stream.RemoveHandler("default")
	checkErr()
}

// ‚ùå –†–∞–ø—Ç–æ–≤–µ –∑–∞–∫—Ä–∏—Ç—Ç—è –∑‚Äô—î–¥–Ω–∞–Ω–Ω—è —Å–µ—Ä–≤–µ—Ä–æ–º
func TestAbruptCloseStreamer(t *testing.T) {
	go startServer()
	time.Sleep(timeOut)

	errC := make(chan error, 1)
	mockErrHandler := func(err error) error {
		errC <- err
		return err
	}

	stream, err := web_socket.New(
		web_socket.WsHost("localhost:8080"),
		web_socket.WsPath("/abrupt"),
		web_socket.SchemeWS,
		web_socket.TextMessage,
		false)
	assert.NoError(t, err)

	stream.SetErrHandler(mockErrHandler)
	stream.AddHandler("abrupt", mockHandler)

	select {
	case err := <-errC:
		assert.Error(t, err)
		assert.Contains(t, err.Error(), "1006") // –∞–±–æ "unexpected EOF"
		t.Logf("Received expected abrupt close error: %v", err)
	case <-time.After(2 * time.Second):
		t.Error("Timeout waiting for abrupt close error")
	}

	// –≥–∞—Ä–∞–Ω—Ç—É—î–º–æ –∑—É–ø–∏–Ω–∫—É loop
	stream.RemoveHandler("abrupt")
}

// ‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω–µ –∑–∞–∫—Ä–∏—Ç—Ç—è (CloseMessage –∑ –∫–æ–¥–æ–º 1000)
func TestNormalCloseStreamer(t *testing.T) {
	go startServer()
	time.Sleep(timeOut)

	errC := make(chan error, 1)
	mockErrHandler := func(err error) error {
		errC <- err
		return err
	}

	stream, err := web_socket.New(
		web_socket.WsHost("localhost:8080"),
		web_socket.WsPath("/normal"),
		web_socket.SchemeWS,
		web_socket.TextMessage,
		false)
	assert.NoError(t, err)

	stream.SetErrHandler(mockErrHandler)
	stream.AddHandler("normal", mockHandler)

	select {
	case err := <-errC:
		assert.Error(t, err)
		assert.Contains(t, err.Error(), "1000")
		t.Logf("Received expected normal close error: %v", err)
	case <-time.After(10 * time.Second):
		t.Error("Timeout waiting for normal close error")
	}

	// –≥–∞—Ä–∞–Ω—Ç—É—î–º–æ –∑—É–ø–∏–Ω–∫—É loop
	stream.RemoveHandler("normal")
}

func TestAbruptCloseLoopStops(t *testing.T) {
	go startServer()
	time.Sleep(timeOut)

	errC := make(chan error, 1)
	extraErr := make(chan error, 1)

	mockErrHandler := func(err error) error {
		select {
		case errC <- err: // –ø–µ—Ä—à–∞ –ø–æ–º–∏–ª–∫–∞
		default:
			extraErr <- err // –¥—Ä—É–≥–∞ –ø–æ–º–∏–ª–∫–∞ = loop –Ω–µ –∑—É–ø–∏–Ω–∏–≤—Å—è
		}
		return err
	}

	stream, err := web_socket.New(
		web_socket.WsHost("localhost:8080"),
		web_socket.WsPath("/abrupt"),
		web_socket.SchemeWS,
		web_socket.TextMessage,
		false)
	assert.NoError(t, err)

	stream.SetErrHandler(mockErrHandler)
	stream.AddHandler("panic-test", mockHandler)

	select {
	case err := <-errC:
		assert.Error(t, err)
		t.Logf("Got expected first error: %v", err)

		// –¥–∞—î–º–æ —Ç—Ä–æ—Ö–∏ —á–∞—Å—É: —è–∫—â–æ loop –Ω–µ –∑—É–ø–∏–Ω–∏–≤—Å—è, –±—É–¥–µ —â–µ –æ–¥–∏–Ω err
		time.Sleep(300 * time.Millisecond)

		select {
		case extra := <-extraErr:
			t.Fatalf("loop did NOT stop: received extra error: %v", extra)
		default:
			t.Log("loop exited properly after first error ‚úÖ")
		}

	case <-time.After(2 * time.Second):
		t.Fatal("Timeout waiting for expected error")
	}
}

func TestPingPongConnectionAlive(t *testing.T) {
	go startServer()
	time.Sleep(timeOut)

	errC := make(chan error, 1)
	mockErrHandler := func(err error) error {
		errC <- err
		return err
	}

	stream, err := web_socket.New(
		web_socket.WsHost("localhost:8080"),
		web_socket.WsPath("/ping-pong?timeout=1s"),
		web_socket.SchemeWS,
		web_socket.TextMessage,
		false)
	assert.NoError(t, err)

	stream.SetErrHandler(mockErrHandler)

	select {
	case err := <-errC:
		t.Fatalf("‚ùå Unexpected error during ping/pong test: %v", err)
	case <-time.After(2 * time.Second):
		t.Log("‚úÖ Client responded to all Pings ‚Äî connection alive")
	}

	stream.Close()
}

func TestWebSocketWrapper_LoopStartsWithAddHandler(t *testing.T) {
	go startServer()
	time.Sleep(timeOut)

	errC := make(chan error, 1)
	mockErrHandler := func(err error) error {
		select {
		case errC <- err:
		default:
			t.Logf("‚ö†Ô∏è errC full, dropping error: %v", err)
		}
		return err
	}

	stream, err := web_socket.New(
		web_socket.WsHost("localhost:8080"),
		web_socket.WsPath("/error?type=loop-start-error"),
		web_socket.SchemeWS,
		web_socket.TextMessage,
		false)
	assert.NoError(t, err)
	if err != nil {
		t.Fatalf("Failed to create WebSocketWrapper: %v", err)
		return
	}

	stream.SetErrHandler(mockErrHandler)

	// –î–æ–¥–∞—î–º–æ —Ö–µ–Ω–¥–ª–µ—Ä ‚Äî —Ü–µ –º–∞—î –∑–∞–ø—É—Å—Ç–∏—Ç–∏ loop
	stream.AddHandler("test", func(msg *simplejson.Json) {
		t.Log("Loop received message (ignored)")
	})
	defer func() {
		stream.RemoveHandler("test")
		stream.Close()
	}()

	// –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫–µ –≤–∏–∫–ª–∏—á–µ –ø–æ–º–∏–ª–∫—É
	req := simplejson.New()
	req.Set("id", "loop-err-test")
	req.Set("method", "ERROR")
	req.Set("params", []interface{}{"loop-start-error"})

	err = stream.Send(req)
	assert.NoError(t, err)

	// –ß–µ–∫–∞—î–º–æ –Ω–∞ —Å–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è —Ö–µ–Ω–¥–ª–µ—Ä–∞ –ø–æ–º–∏–ª–æ–∫
	select {
	case err := <-errC:
		assert.Error(t, err)
		assert.Contains(t, err.Error(), "loop-start-error")
		t.Logf("‚úÖ Caught expected error: %v", err)
	case <-time.After(2 * time.Second):
		t.Fatal("‚ùå Timed out waiting for error")
	}

	// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ loop –∑–∞–ø—É—â–µ–Ω–∏–π
	assert.True(t, stream.GetLoopStarted(), "loop should be started after AddHandler")
}

package web_socket

import (
	"fmt"
	"net"
	"strings"
	"time"

	"github.com/bitly/go-simplejson"
	"github.com/gorilla/websocket"
)

// –°–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–∞–ø–∏—Ç—É –≤ JSON
func (ws *WebSocketWrapper) Serialize(request *simplejson.Json) (requestBody []byte) {
	requestBody, _ = request.MarshalJSON()
	return
}

// –î–µ—Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
func (ws *WebSocketWrapper) Deserialize(body []byte) (response *simplejson.Json) {
	response, err := simplejson.NewJson(body)
	if err != nil {
		response = simplejson.New()
		response.Set("response", string(body))
	}
	return
}

// –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–∏—Ç—É
func (ws *WebSocketWrapper) Send(request *simplejson.Json) (err error) {
	// –°–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–∞–ø–∏—Ç—É –≤ JSON
	requestBody := ws.Serialize(request)

	// –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–∏—Ç—É
	err = ws.conn.WriteMessage(int(ws.messageType), requestBody)
	if err != nil {
		err = fmt.Errorf("error sending message: %v", err)
		return
	}
	return
}

func (ws *WebSocketWrapper) isFatalCloseError(err error) bool {
	if ce, ok := err.(*websocket.CloseError); ok {
		switch ce.Code {
		case
			websocket.CloseNormalClosure,     // 1000
			websocket.CloseGoingAway,         // 1001
			websocket.CloseAbnormalClosure,   // 1006
			websocket.CloseInternalServerErr, // 1011
			websocket.CloseServiceRestart:    // 1012
			return true
		}
	}

	// –ê–±–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ —Ç–µ–∫—Å—Ç—É (—è–∫—â–æ CloseError –Ω–µ –±—É–≤ —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–∏–π)
	if err != nil && (strings.Contains(err.Error(), "use of closed network connection") ||
		strings.Contains(err.Error(), "EOF")) {
		return true
	}

	return false
}

// –ß–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
func (ws *WebSocketWrapper) Read() (response *simplejson.Json, err error) {
	var body []byte

	if ws.socketClosed {
		err = ws.errorHandler(fmt.Errorf("socket is closed"))
		return
	}

	// üî• –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–π–º–∞—É—Ç —á–∏—Ç–∞–Ω–Ω—è
	ws.conn.SetReadDeadline(time.Now().Add(1 * time.Second))

	_, body, err = ws.conn.ReadMessage()
	if err != nil {
		// –Ø–∫—â–æ —Ü–µ –ø—Ä–æ—Å—Ç–æ —Ç–∞–π–º–∞—É—Ç ‚Äî –Ω–µ –≤–≤–∞–∂–∞—î–º–æ —Ñ–∞—Ç–∞–ª—å–Ω–∏–º
		if ne, ok := err.(net.Error); ok && ne.Timeout() {
			return nil, nil // –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–±—É—î–º–æ –∑–Ω–æ–≤—É
		}

		if ws.isFatalCloseError(err) {
			err = ws.errorHandler(fmt.Errorf("unexpected close error: %v", err))
			ws.socketClosed = true
		} else {
			err = ws.errorHandler(fmt.Errorf("error reading message: %v", err))
		}
		return
	}

	response = ws.Deserialize(body)
	return
}

func (ws *WebSocketWrapper) Close() (err error) {
	ws.cancel()
	err = ws.conn.Close()
	if err != nil {
		err = ws.errorHandler(fmt.Errorf("error closing connection: %v", err))
		return
	}
	ws.conn = nil
	ws = nil
	return
}

func (ws *WebSocketWrapper) errorHandler(err error) error {
	if ws.errHandler != nil {
		ws.errHandler(err)
	}
	if !ws.silent {
		fmt.Println(err)
	}
	return err
}

func (ws *WebSocketWrapper) ErrorHandler() ErrHandler {
	return ws.errorHandler
}

func (ws *WebSocketWrapper) GetDoneC() chan struct{} {
	return ws.doneC
}

func (ws *WebSocketWrapper) SetTimeOut(timeout time.Duration) {
	ws.timeOut = timeout
	ws.conn.SetReadDeadline(time.Now().Add(timeout))
	ws.conn.SetWriteDeadline(time.Now().Add(timeout))
}
